syntax = "proto3";

package infraboard.mcenter.instance;
option go_package = "github.com/infraboard/mcenter/apps/instance";

// 实例注册的协议类型
enum PROTOCAL {
    // GRPC服务
    GRPC = 0;
    // HTTP服务
    HTTP = 1;
}

enum PROVIDER {
    // SDK直接注册
    SDK = 0;
    // 服务来源于kubernetes, 由operator提供注册
    KUBERNETES = 1;
}

// 服务实例信息, 比如 阿里云_杭州/生产环境/app01/default/instance01
message Instance {
    // 实例Id
    // @gotags: bson:"_id" json:"id"
    string id = 1;
    // 服务所属域
    // @gotags: bson:"domain" json:"domain"
    string domain = 2;
    // 服务所属空间
    // @gotags: bson:"namespace" json:"namespace"
    string namespace = 3;
    // 实例所属应用名称
    // @gotags: bson:"service_name" json:"service_name"
    string service_name = 4;
    // 实例注册相关信息
    // @gotags: bson:"registry_info" json:"registry_info"
    RegistryRequest registry_info = 5;
    // 实例状态
    // @gotags: bson:"status" json:"status"
    Status status = 6;
    // 实例配置
    // @gotags: bson:"config" json:"config"
    Config config = 7;
}

message Config {
    // 是否启用该实例
    bool enabled = 1;
    // 配置更新时间
    // @gotags: bson:"update_at" json:"update_at"
    int64 update_at = 2;
    // 配置更新人
    // @gotags: bson:"update_by" json:"update_by"
    int64 update_by = 3;
    // 实例权重, 初始值通过注册设置, 注册后可以动态调整
    // @gotags: bson:"weight" json:"weight" toml:"weight" validate:"required"
    uint32 weight = 4;
    // 心跳设置
    // @gotags: bson:"heart_beat" json:"heart_beat"
    HeartbeatConfig heartbeat = 5;
}

message HeartbeatConfig {
    // 心跳间隔
    // @gotags: bson:"interval" json:"interval"
    int32 interval = 1;
    // 心跳超时时间, 单位秒
    // @gotags: bson:"timeout" json:"timeout"
    int32 timeout = 2;
}

message InstanceSet {
    // 总个数
    // @gotags: bson:"status" json:"status"
    int64 total = 1;
    // 实例列表
    // @gotags: bson:"items" json:"items"
    repeated Instance items = 2;
}

message RegistryRequest {
    // 提供注册提供方
    // @gotags: bson:"provider" json:"provider" toml:"provider" yaml:"provider" env:"MCENTER_INSTANCE_PROVIDER"
    PROVIDER provider = 1;
    // 实例所属地域, 默认default
    // @gotags: bson:"region" json:"region" toml:"region" yaml:"region" env:"MCENTER_INSTANCE_REGION" validate:"required"
    string region = 2;
    // 实例所属环境, 默认default
    // @gotags: bson:"environment" json:"environment" toml:"environment" yaml:"environment" env:"MCENTER_INSTANCE_ENV" validate:"required"
    string environment = 3;
    // 实例所属集群, 默认default
    // @gotags: bson:"cluster" json:"cluster" toml:"cluster" yaml:"cluster" env:"MCENTER_INSTANCE_CLUSTER" validate:"required"
    string cluster = 14;
    // 实例所属分组,默认default
    // @gotags: bson:"group" json:"group" toml:"group" yaml:"group" env:"MCENTER_INSTANCE_GROUP" validate:"required"
    string group = 4;
    // 实例名称, 如果不传, 则会随机生成
    // @gotags: bson:"name" json:"name" toml:"name" yaml:"name" env:"MCENTER_INSTANCE_NAME"
    string name = 5;
    // 注册的对外的访问的协议
    // @gotags: bson:"protocal" json:"protocal" toml:"protocal" yaml:"protocal" env:"MCENTER_INSTANCE_PROTOCAL"
    PROTOCAL protocal = 6;
    // 实例权重
    // @gotags: bson:"weight" json:"weight" toml:"weight" yaml:"weight" env:"MCENTER_INSTANCE_WEIGHT" validate:"required"
    uint32 weight = 12;
    // 实例地址
    // @gotags: bson:"address" json:"address" toml:"address" yaml:"address" env:"MCENTER_INSTANCE_ADDRESS" validate:"required"
    string address = 7;
    // 实例健康检查配置
    // @gotags: bson:"health_check" json:"health_check" toml:"health_check" yaml:"health_check"
    HealthCheck health_check = 13;
    // 实例标签, 可以根据标签快速过滤实例
    // @gotags: bson:"labels" json:"labels" toml:"labels" yaml:"labels" env:"MCENTER_INSTANCE_LABELS"
    map<string,string> labels = 9;
    // 实例元数据
    // @gotags: bson:"meta" json:"meta" toml:"meta" yaml:"meta" env:"MCENTER_INSTANCE_META"
    map<string,string> meta = 11;
    // 实例构建信息
    // @gotags: bson:"build" json:"build" toml:"build" yaml:"build"
    Build build = 10;
}

message HealthCheck {
    // 健康检查URL
    // @gotags: bson:"path" json:"path" toml:"path" yaml:"path" env:"MCENTER_HEALTH_CHECK_PATH"
    string path = 1;
    // 健康检查时间间隔, 单位秒
    // @gotags: bson:"interval" json:"interval" toml:"interval" yaml:"interval" env:"MCENTER_HEALTH_CHECK_INTERVAL"
    int32 interval = 2;
    // 健康健康操时时间, 单位秒
    // @gotags: bson:"timeout" json:"timeout" toml:"timeout" yaml:"timeout" env:"MCENTER_HEALTH_CHECK_TIMEOUT"
    int32 timeout = 3;
}


// 实例构建相关信息
message Build {
    // 实例版本
    // @gotags: bson:"version" json:"version" toml:"version" yaml:"version" env:"MCENTER_BUILD_VERSION"
    string version = 1;
    // 实例代码构建对应分支
    // @gotags: bson:"git_branch" json:"git_branch" toml:"git_branch" yaml:"git_branch" env:"MCENTER_BUILD_GIT_BRANCH"
    string git_branch = 2;
    // 实例代码对应commit号
    // @gotags: bson:"git_commit" json:"git_commit" toml:"git_commit" yaml:"git_commit" env:"MCENTER_BUILD_GIT_COMMIT"
    string git_commit = 3;
    // 实例构建时间
    // @gotags: bson:"build_at" json:"build_at" toml:"build_at" yaml:"build_at" env:"MCENTER_BUILD_AT"
    int64 build_at = 4;
}

message Status {
    // 上线时间
    // @gotags: bson:"online" json:"online"
    int64 online = 1;
    // 服务状态
    // @gotags: bson:"stage" json:"stage"
    STAGE stage = 2;
    // 状态更新时间
    // @gotags: bson:"update_at" json:"update_at"
    int64 update_at = 3;
}

enum STAGE {
    // 实例正常运行
    ALIVE = 0;
}

message HeartbeatRequest {
    // 实例Id
    // @gotags: bson:"instance_id" json:"instance_id"
    string instance_id = 1;
}

enum CommandType {
    UPDATE_INSTANCE = 0;
}

message RemoteCommand {
    // 客户端需要执行命令类型
    // @gotags: bson:"type" json:"type"
    CommandType type = 1;
    // 指令参数
    // @gotags: bson:"params" json:"params"
    map<string,string> params = 2;
}

message HeartbeatResponse {
    // 客户端下一次心跳包的发送间隔, 单位秒
    // @gotags: bson:"next" json:"next"
    int32 next = 1;
    // 客户端需要执行命令
    // @gotags: bson:"remote_command" json:"remote_command"
    RemoteCommand remote_command = 2;
}